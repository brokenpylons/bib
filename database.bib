@string{heering-jan      = {Heering, Jan}}
@string{mernik-marjan    = {Mernik, Marjan}}
@string{sahni-sartaj     = {Sahni, Sartaj}}
@string{sloane-anthony-m = {Sloane, Anthony M.}}

@xdata{acm,
  publisher = {Association for Computing Machinery},
  address   = {New York}
}

@xdata{acm-computing-surveys,
  title = {ACM Computing Surveys},
  issn  = {0360-0300}
}

@periodical{acm-computing-surveys:37-4,
  editor = sahni-sartaj,
  volume = {37},
  number = {4},
  date   = {2005-12},
  xdata  = {acm-computing-surveys}
}

@article{mernik2005:domain,
  abstract = {Domain-specific languages (DSLs) are languages tailored to a
    specific application domain. They offer substantial gains in expressiveness
    and ease of use compared with general-purpose programming languages in
    their domain of application. DSL development is hard, requiring both domain
    knowledge and language development expertise. Few people have both. Not
    surprisingly, the decision to develop a DSL is often postponed
    indefinitely, if considered at all, and most DSLs never get beyond the
    application library stage.

    Although many articles have been written on the development of particular
    DSLs, there is very limited literature on DSL development methodologies and
    many questions remain regarding when and how to develop a DSL. To aid the
    DSL developer, we identify patterns in the decision, analysis, design, and
    implementation phases of DSL development. Our patterns improve and extend
    earlier work on DSL design patterns.  We also discuss domain analysis tools
    and language development systems that may help to speed up DSL development.
    Finally, we present a number of open problems.}
  author = mernik-marjan # { and } # heering-jan # { and } # sloane-anthony-m,
  title  = {When and how to develop domain-specific languages},
  pages  = {316--344},
  doi    = {10.1145/1118890.1118892},
  xdata  = {acm-computing-surveys:37-4}
}
